source('~/ui.r', echo=TRUE)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runapp()
library(shiny)
runApp()
runApp()
runApp()
x<-1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?runApp()
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74,0.5))
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
myHist(10)
?manipulate()
manipulate(myHist(mu), mu = slider(62, 74, step=0.5))
manipulate(myHist(mu), mu = slider(62, 74))
manipulate(myHist(mu), mu = slider(62, 74, steps=0.5))
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = manipulate::slider(0, 2, step = 0.1))
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rChaarts)
library(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('n1.html', cdn = TRUE)
cat('<iframe src="n1.html" width=100%, height=600></iframe>')
n1
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
r1
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'bar')
r1
hair_eye = as.data.frame(HairEyeColor)
r2 <- rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r2
r1
haireye = as.data.frame(HairEyeColor)
> n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
+             data = subset(haireye, Sex == 'Male')
haireye = as.data.frame(HairEyeColor)
> n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1
r1$publish('myPlot', host = 'rpubs')
library(markdown)
install.packages("markdown")
library(markdown)
r1$publish('myPlot', host = 'rpubs')
r1$save('myPlot.html')
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M
install.packages("Rtools")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
runApp
runApp()
shinyapps::setAccountInfo(
name="vikasgoyal",
token="0DE87663B7B2A3F2A30A24A296477EC7",
secret="GWR802Go1k+2D5aK9AMXpPEyWoFex1YluTR9YHMt")
deployApp()
library(animation)
install.packages("animation")
library(animation)
## Create the square to start with
x = seq(-5, 5, length = 50)
y = seq(-5, 5, length = 50)
square = as.matrix(expand.grid(x, y))
## Create the rotation matrix
angle = pi/180
rotation =
matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
## Plot
saveGIF(
{
init = square
for(i in seq(0, 2 * pi, length = 360)){
tmp = init
distFromCenter = sqrt(tmp[, 1]^2 + tmp[, 2]^2)
tmp[, 2] = tmp[, 2] + 10 * sin(i - distFromCenter)
colIntensity = (tmp[, 2] + abs(min(tmp[, 2])))/
max((tmp[, 2] + abs(min(tmp[, 2]))))
plot(tmp[, c(1, 2)], xlim = c(-10, 10), ylim = c(-20, 20),
pch = ".", cex = 3, axes = FALSE, xlab = "", ylab = "",
col = rgb(colIntensity, 0, 0))
init = init %*% rotation
}
},
movie.name = "./wave.gif", interval = 0.005,
nmax = 30, ani.width = 800,  ani.height = 800
)
qnorm(0.2, mean=77,sd=5)
choose(100,92)
dbinom(92,size=100,p=0.9)
dbinom(50,size=160,p=0.28)
dbinom(1,size=10,p=0.07)
sum(dbinom(1:10,size=10,p=0.07))
dbinom(2,size=3,p=0.51)
sum(dbinom(35:3000000,size=3000000,p=0.00001))
sum(dbinom(36:3000000,size=3000000,p=0.00001))
dir()
Q7 <- sample(c("nurse","doctor","biomedical scientist"), 100, replace=T, c(0.5, 0.3, 0.2))
hist(Q7)
plot(Q7)
pie(table(Q7))
pie(Q7)
?plot
x <- 0:30 ; plot(x, dbinom(x, 30, 0.5), type = "h")
x <- 0:2 ;
plot(x, dbinom( ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
x <- 0:2 ;
plot(x, dbinom( ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
plot(x, dbinom(X ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
plot(x, dbinom(x), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
x<-sez(-4,4,0.01)
x<-seq(-4,4,0.01)
plot(x,dnorm(x),type="l")
plot(x,dnorm(x))
plot(x,pnorm(x))
pnorm(8.92,mean=0,sd=1)
source("http://bit.ly/dasi_inference")
load(url("http://www.openintro.org/stat/data/atheism.RData"))
View(atheism)
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year ==
"2012")
summary(us12)
50/952
5000/952
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2 * sqrt(p * (1 - p)/n)
plot(me ~
p)
spain12 = subset(atheism, atheism$nationality == "Spain")
inference(spain12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
str(mlb11)
scatterplot
?scatterplot()
plot(runs,bat_avg)
plot(mlb11$runs,mlb11$bat_avg)
plot(mlb11$runs,mlb11$at_bats)
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~
at_bats, data = mlb11)
summary(m1)
m1 <- lm(runs ~
homeruns, data = mlb11)
summary(m1)
plot(mlb11$runs ~
mlb11$at_bats)
abline(m1)
m2 <- lm(runs ~
at_bats, data = mlb11)
abline(m2)
plot(m1$residuals ~
mlb11$at_bats)
abline(h = 0, lty = 3)
hist(m1$residuals)
qqnorm(m1$residuals)
hist(m1$residuals)
summary(mln11)
summary(mlb11)
str(mlb11)
m2 <- lm(runs ~
at_bats, data = mlb11)
m3 <- lm(runs ~
hits, data = mlb11)
m4 <- lm(runs ~
wins, data = mlb11)
m5 <- lm(runs ~
bat_avg, data = mlb11)
summary(m2)
summary(m3)
summary(m4)
summary(m5)
str(mlb11)
m6 <- lm(runs ~
new_obs, data = mlb11)
m7 <- lm(runs ~
new_slug, data = mlb11)
m8 <- lm(runs ~
new_onbase, data = mlb11)
summary(m6)
summary(m7)
summary(m8)
tm()
install.packages("tm")
?tm
?tm()
tm()
library("wordnet")
install.packages("wordnet")
library("wordnet")
synonyms("company")
synonyms("sell")
?synonyms()
synonyms("company",NOUN)
synonyms("company","NOUN")
synonyms("company","VERB")
setDict("C:\\Program Files (x86)\\WordNet\\3.0")
initDict("C:/Program Files (x86)/WordNet/2.1/dict")
setDict("C:/Program Files (x86)/WordNet/2.1/dict")
load(url("http://www.openintro.org/stat/data/evals.RData"))
str(evals)
summary(evals)
hist(evals$score)
plot(evals$score ~
evals$bty_avg)
abline(evals$score=4.175)
abline(evals$score)
abline(evals$score="4.147")
abline(evals$score=="4.147")
abline(evals$score,"4.147")
jitter(evals$score ~
evals$bty_avg)
?jitter
jitter(evals$score)
plot(jitter(evals$score) ~
evals$bty_avg)
m_bty<-lm(score~bty_avg,data=evals)
abline(m_bty)
summary(m_bty)
plot(m_bty$residuals)
hist(m_bty$residuals)
qqnorm(m_bty$residuals)
qqline(m_bty$residuals)
plot(evals$bty_avg ~
evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[,13:19])
m_bty_gen <- lm(score ~
bty_avg + gender, data = evals)
summary(m_bty_gen)
multiLines(m_bty_gen)
str(evals)
m_bty_rank <- lm(score ~
bty_avg + rank, data = evals)
summary(m_bty_rank)
multiLines(m_bty_rank)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~
ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~
ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits, data = evals)
summary(m_full)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~
ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits , data = evals)
summary(m_full)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~
ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
library(MASS)
step <- stepAIC(m_full, direction="both")
step$call$formula # score ~ ethnicity + gender + language + age + cls_perc_eval + cls_credits + bty_avg
m_step = lm(as.formula(step$call$formula), data=evals)
summary(m_step)$adj.r.squared
words <- c("a","b","c","d","e")
n1 <- c(rep("a",50),rep("b",50))
set.seed(3535)
n2 <- sample(words, 100, replace = TRUE)
n3 <- sample(words, 100, replace = TRUE)
n4 <- sample(words, 100, replace = TRUE)
ngrams <- paste(n1,n2,n3,n4)
print("100 total entries")
print(paste(length(unique(ngrams)),"unique total entries"))
unique(ngrams)
length(unique(ngrams))
print(paste("Of those, ", length(tapply(ngrams,ngrams,length)[tapply(ngrams,ngrams,length) >1]), " account for ", sum(tapply(ngrams,ngrams,length)[tapply(ngrams,ngrams,length) >1]), " of the total"))
tapply(ngrams,ngrams,length)[tapply(ngrams,ngrams,length) >1]
medical.example <-
data.frame(patient = 1:100,
age = rnorm(100, mean = 60, sd = 12),
treatment = gl(2, 50,
labels = c("Treatment", "Control")))
baseball.example <-
data.frame(team = gl(5, 5,
labels = paste("Team", LETTERS[1:5])),
player = sample(letters, 25),
batting.average = runif(25, .200, .400))
View(medical.example)
tapply(medical.example$age, medical.example$treatment, mean)
tapply(medical.example$treatment, medical.example$age, mean)
tapply(medical.example$age, medical.example$age, mean)
ngrams <- paste(n2,n3,n4)
print("100 total entries")
print(paste(length(unique(ngrams)),"unique total entries"))
object.size()
object.size(baseball.example)
gc()
runExample("01_hello")
library(shiny)
runExample("01_hello")
library(shiny)
shiny::runApp()
shiny::runGitHub('shiny_example', 'rstudio')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='vikasgoyal', token='07F126056D453CE9636A5A9E73558C2A', secret='3cVuv3tQehYMKVK1lkb3iGRcEl5H3Wa64JXotm95')
deployApp()
shiny::runApp()
deployApp()
news<-readLines("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",warn = FALSE)
library(RCurl)
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=curl, quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",method=curl, quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",method=curl, quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=curl, quiet = FALSE, mode = "a",
cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=curl, quiet = FALSE,
cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, quiet = FALSE,
cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=wget, quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"))
news<-readLines("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",warn = FALSE)
news<-readLines(url("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt"),warn = FALSE)
news<-readLines(curl("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt"),warn = FALSE)
curl("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt")
library(CUrl)
library(RCUrl)
library(RCurl)
news<-readLines(curl("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt"),warn = FALSE)
?readLines
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=curl)
getwd()
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=curl)
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=curl)
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",en_US.twitter.txt, method=wget)
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",/en_US.twitter.txt, method=wget)
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",./en_US.twitter.txt, method=wget)
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt")
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",desctfile=en_US.twitter.txt)
download.file("https://s3-us-west-2.amazonaws.com/mahendrabucket/en_US.twitter.txt",destfile=en_US.twitter.txt)
getwd()
docs <- c("This is a text.", "This another one.")
(vs <- VectorSource(docs))
inspect(Corpus(vs))
library(tm)
docs <- c("This is a text.", "This another one.")
(vs <- VectorSource(docs))
inspect(Corpus(vs))
setwd("C:/Users/Vikas/Downloads/forshiny")
library(shiny)
rumApp()
runApp()
runApp()
runApp()
getwd()
runApp(C:/Users/Vikas/Downloads/forshiny)
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp(appDir = getwd())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
